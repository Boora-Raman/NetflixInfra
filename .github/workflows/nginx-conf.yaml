name: Deploy Nginx Configuration

on:
  push:
    branches:
      - main

env:
  EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  test-and-deploy:
    name: Test and Deploy Nginx Configuration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Nginx Locally
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx

      - name: Copy Nginx Config for Testing
        run: |
          sudo cp ./nginx-config/default.conf /etc/nginx/conf.d/default.conf

      - name: Test Local Nginx Configuration
        run: |
          sudo nginx -t

      - name: Remove Local Nginx Config
        run: |
          sudo rm /etc/nginx/conf.d/default.conf

      - name: Set up SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > mykey.pem
          chmod 600 mykey.pem

      - name: Build Docker image for Nginx
        run: |
          IMAGE_TAG="${{ github.sha }}"
          docker build -t $DOCKER_USERNAME/nginx-custom:$IMAGE_TAG .

      - name: Login to Docker Hub
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          IMAGE_TAG="${{ github.sha }}"
          docker push $DOCKER_USERNAME/nginx-custom:$IMAGE_TAG

      - name: Deploy Docker image on EC2
        run: |
          IMAGE_TAG="${{ github.sha }}"
          ssh -o StrictHostKeyChecking=no -i mykey.pem admin@$EC2_PUBLIC_IP << 'EOF'
            # Stop and remove the existing Nginx container if it exists
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^nginx-custom\$"; then
              sudo docker stop nginx-custom || true
              sudo docker rm nginx-custom || true
            fi

            # Pull the latest Docker image from Docker Hub
            sudo docker pull $DOCKER_USERNAME/nginx-custom:$IMAGE_TAG

            # Run a new container with the pulled image
            sudo docker run -d --name nginx-custom -p 80:80 $DOCKER_USERNAME/nginx-custom:$IMAGE_TAG
          EOF
